# Generated by Django 2.0 on 2018-10-04 13:32

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('age_groups', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('< 19', '< 19'), ('19 - 30', '19 - 30'), ('30 - 65', '30 - 65'), ('65+', '65+')], max_length=10), size=4, verbose_name='age group')),
                ('start_date', models.DateTimeField(editable=False, help_text='Date when the competition started', verbose_name='start date')),
                ('end_date', models.DateTimeField(editable=False, help_text='Date when the competition ended', verbose_name='end date')),
                ('criteria', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('saved CO2 emissions', 'saved CO2 emissions'), ('saved NOx emissions', 'saved NOx emissions'), ('saved CO2 emissions', 'saved CO2 emissions'), ('saved CO emissions', 'saved CO emissions'), ('saved PM10 emissions', 'saved PM10 emissions'), ('consumed calories', 'consumed calories'), ('bike usage frequency', 'bike usage frequency'), ('public transport usage frequency', 'public transport usage frequency'), ('bike distance', 'bike distance'), ('sustainable means distance', 'sustainable means distance')], max_length=100), help_text='Which criteria will be used for deciding who wins the competition', size=None, verbose_name='criteria')),
                ('winner_threshold', models.IntegerField(default=1, help_text='After results are calculated and ordered, how many of the top users should be considered winners? The winners will earn the prizes specified in this competition.', verbose_name='winner threshold')),
            ],
            options={
                'ordering': ('name', 'start_date', 'end_date', 'age_groups'),
            },
        ),
        migrations.CreateModel(
            name='CompetitionPrize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_rank', models.IntegerField(blank=True, help_text="Rank that the user must attain in the underlying competition in order to be awarded the prize. If None, all of the competition's winners will be awarded the prize", null=True, verbose_name='user rank')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prizes.Competition', verbose_name='competition')),
            ],
            options={
                'ordering': ('prize', 'competition', 'user_rank'),
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('url', models.URLField(blank=True, help_text='URL where more information about this prize can be obtained', null=True, verbose_name='url')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='sponsor')),
                ('logo', models.ImageField(null=True, upload_to='', verbose_name='logo')),
                ('url', models.URLField(blank=True, null=True, verbose_name='url')),
            ],
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(verbose_name='rank')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winners', to='prizes.Competition', verbose_name='competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions_won', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('competition', 'rank', 'user'),
            },
        ),
        migrations.AddField(
            model_name='prize',
            name='sponsor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='prizes.Sponsor', verbose_name='sponsor'),
        ),
        migrations.AddField(
            model_name='competitionprize',
            name='prize',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prizes.Prize', verbose_name='prize'),
        ),
        migrations.CreateModel(
            name='CurrentCompetition',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('prizes.competition',),
        ),
        migrations.CreateModel(
            name='FinishedCompetition',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('prizes.competition',),
        ),
    ]
