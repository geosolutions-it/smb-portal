# Generated by Django 2.0 on 2018-09-26 15:29

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_group', models.CharField(choices=[('< 19', '< 19'), ('19 - 30', '19 - 30'), ('30 - 65', '30 - 65'), ('65+', '65+'), ('compound_age_group', 'compound age group')], max_length=10, verbose_name='age group')),
                ('start_date', models.DateTimeField(editable=False, help_text='Date when the competition started', verbose_name='start date')),
                ('end_date', models.DateTimeField(editable=False, help_text='Date when the competition ended', verbose_name='end date')),
            ],
            options={
                'ordering': ('competition_definition', 'age_group'),
            },
        ),
        migrations.CreateModel(
            name='CompetitionDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('num_days', models.IntegerField(default=7, help_text='Total number of days that this competition will run', verbose_name='number of days')),
                ('starts_at', models.DateTimeField(verbose_name='starts at')),
                ('num_repeats', models.IntegerField(default=0, help_text='If this competition should be repeated or run only once. If set to 0 (the default), the competition will run only once. Otherwise, it will run for the specified number of times', verbose_name='number of repetitions')),
                ('repeat_when', models.CharField(choices=[('repeat weekly', 'repeat each week'), ('repeat monthly', 'repeat each month'), ('repeat yearly', 'repeat each year'), ('repeat immediately', 'repeat immediately')], default='repeat immediately', help_text='If this competition is to be repeated, when should the next run start. If `immediately`, the new run will start on the next day after the previous one ends. If  one of the other options is selected, the next run will start on the same day as the previous, in the new temporal interval.', max_length=50, verbose_name='repeat every unit')),
                ('age_group', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('< 19', '< 19'), ('19 - 30', '19 - 30'), ('30 - 65', '30 - 65'), ('65+', '65+')], max_length=10), size=4, verbose_name='age group')),
                ('segment_by_age_group', models.BooleanField(default=True, help_text='Whether this promotion is to be applied to each chosen age group separately or if the chosen age groups are to be merged into a single group. In the first case, there will be winners for each age group, while in the second case the winners will be elected from a pool of all users in the chosen age groups.', verbose_name='segment by age group')),
                ('criteria', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('saved CO2 emissions', 'saved CO2 emissions'), ('saved NOx emissions', 'saved NOx emissions'), ('saved CO2 emissions', 'saved CO2 emissions'), ('saved CO emissions', 'saved CO emissions'), ('saved PM10 emissions', 'saved PM10 emissions'), ('consumed calories', 'consumed calories'), ('bike usage frequency', 'bike usage frequency'), ('public transport usage frequency', 'public transport usage frequency'), ('bike distance', 'bike distance'), ('sustainable means distance', 'sustainable means distance')], max_length=100), help_text='Which criteria will be used for deciding who wins the competition', size=None, verbose_name='criteria')),
                ('winner_threshold', models.IntegerField(default=1, help_text='After results are calculated and ordered, how many of the top users should be considered winners? The winners will earn the prizes specified in this competition.', verbose_name='winner threshold')),
            ],
            options={
                'ordering': ('name', 'starts_at'),
            },
        ),
        migrations.CreateModel(
            name='CompetitionPrize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_rank', models.IntegerField(blank=True, help_text="Rank that the user must attain in the underlying competition in order to be awarded the prize. If None, all of the competition's winners will be awarded the prize", null=True, verbose_name='user rank')),
                ('competition_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prizes.CompetitionDefinition', verbose_name='competition definition')),
            ],
            options={
                'ordering': ('prize', 'competition_definition', 'user_rank'),
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(verbose_name='rank')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winners', to='prizes.Competition', verbose_name='competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions_won', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('competition', 'rank', 'user'),
            },
        ),
        migrations.AddField(
            model_name='competitionprize',
            name='prize',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prizes.Prize', verbose_name='prize'),
        ),
        migrations.AddField(
            model_name='competition',
            name='competition_definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prizes.CompetitionDefinition', verbose_name='competition definition'),
        ),
    ]
